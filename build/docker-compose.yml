name: notepad

services:
  backend:
    container_name: note_backend
    build:
      context: ../backend/
      dockerfile: ../build/backend/Dockerfile
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    environment:
      POSTGRES_HOST: db
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    depends_on:
      db:
        condition: service_healthy
    develop:
      watch:
        - action: rebuild
          path: ../backend

  frontend:
    container_name: note_frontend
    build:
      context: ../frontend/
      dockerfile: ../build/frontend/Dockerfile
      args:
        BACKEND_PORT: ${BACKEND_PORT}
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
    environment:
      FRONTEND_PORT: ${FRONTEND_PORT}
    depends_on:
      - backend
    develop:
      watch:
        - action: rebuild
          path: ../frontend

  db:
    container_name: note_db
    image: postgres:latest
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
